})
}
# Function to check and create database if necessary
check_database <- function() {
tryCatch({
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "localhost\\KENSQL",
Database = "master",
Trusted_Connection = "Yes")
result <- dbGetQuery(con, "SELECT name FROM sys.databases WHERE name = 'GlobalTemperatureAnalysis'")
if (nrow(result) == 0) {
cat("GlobalTemperatureAnalysis database does not exist. Creating it now...\n")
dbExecute(con, "CREATE DATABASE GlobalTemperatureAnalysis")
cat("GlobalTemperatureAnalysis database created.\n")
} else {
cat("GlobalTemperatureAnalysis database exists.\n")
}
dbDisconnect(con)
}, error = function(e) {
cat("Error in check_database:", conditionMessage(e), "\n")
})
}
# Function to run PowerShell script
run_powershell_script <- function(script_name) {
script_path <- file.path(here::here(), "..", "sql", script_name)
cat("Running PowerShell script:", script_path, "\n")
if (file.exists(script_path)) {
# Convert to relative path
relative_script_path <- file.path("..", "sql", script_name)
# Change working directory to the R folder before running the PowerShell script
original_wd <- getwd()
setwd(here::here())
output <- system2("powershell",
args = c("-ExecutionPolicy", "Bypass", "-File", relative_script_path),
stdout = TRUE, stderr = TRUE)
# Change back to the original working directory
setwd(original_wd)
cat("PowerShell script output:\n", paste(output, collapse = "\n"), "\n")
} else {
cat("Error: PowerShell script not found at", script_path, "\n")
}
cat(script_name, "completed.\n\n")
}
# Main execution
main <- function() {
cat("Starting data processing pipeline...\n\n")
# Run R scripts
run_r_script("data_downloader.R")
run_r_script("data_converter.R")
# Check and create database if necessary
check_database()
# Run SQL and PowerShell scripts
run_sql_script("1_setup_database_and_timeseries.sql")
run_sql_script("2_prepare_gridded_data_staging.sql")
# Run PowerShell script with error handling
tryCatch({
run_powershell_script("import-gridded-data.ps1")
}, error = function(e) {
cat("Error running PowerShell script:", conditionMessage(e), "\n")
})
run_sql_script("3_process_gridded_data.sql")
cat("Data processing pipeline completed.\n")
cat("Next steps: Use Tableau to visualize the cleaned data.\n")
}
# Run the main function
main()
# runner.R
# Function to install and load packages
install_and_load <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
cat("Installing package:", package, "\n")
install.packages(package, dependencies = TRUE, quiet = TRUE)
library(package, character.only = TRUE)
}
}
# Install and load required packages
install_and_load("here")
install_and_load("DBI")
install_and_load("odbc")
# Print the current working directory
cat("Current working directory:", getwd(), "\n")
# Print the project root directory as determined by here
cat("Project root directory:", here::here(), "\n")
# Function to run R scripts
run_r_script <- function(script_name) {
script_path <- file.path(here::here(), script_name)
cat("Looking for script at:", script_path, "\n")
if (file.exists(script_path)) {
cat("Running", script_name, "...\n")
source(script_path)
cat(script_name, "completed.\n\n")
} else {
cat("Error:", script_name, "not found at", script_path, "\n")
}
}
# Function to run SQL scripts
run_sql_script <- function(script_name) {
script_path <- file.path(here::here(), "..", "sql", script_name)
cat("Running SQL script:", script_path, "\n")
tryCatch({
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = Sys.getenv("SQL_SERVER_NAME"),
Database = Sys.getenv("SQL_DATABASE_NAME"),
Trusted_Connection = "Yes")
if (file.exists(script_path)) {
sql_script <- readLines(script_path)
sql_script <- paste(sql_script, collapse = "\n")
# Split the script into individual statements
statements <- strsplit(sql_script, ";")[[1]]
for (stmt in statements) {
if (trimws(stmt) != "") {
tryCatch({
if (grepl("^PRINT", trimws(stmt), ignore.case = TRUE)) {
# For PRINT statements, use dbGetQuery to capture the output
result <- dbGetQuery(con, paste0("DECLARE @msg NVARCHAR(MAX); ", stmt, "; SELECT @msg AS message"))
cat("SQL Server message:", result$message, "\n")
} else {
# For other statements, use dbExecute
result <- dbExecute(con, stmt)
cat("Executed statement. Rows affected:", result, "\n")
}
}, error = function(e) {
cat("Error executing statement:", conditionMessage(e), "\n")
})
}
}
} else {
cat("Error: SQL script not found at", script_path, "\n")
}
dbDisconnect(con)
cat(script_name, "processing completed.\n\n")
}, error = function(e) {
cat("Error in run_sql_script:", conditionMessage(e), "\n")
})
}
# Function to check if all required environment variables are set
check_env_variables <- function() {
required_vars <- c("SQL_SERVER_NAME", "SQL_DATABASE_NAME", "SQL_TABLE_NAME", "CSV_PATH")
missing_vars <- required_vars[sapply(required_vars, function(x) Sys.getenv(x) == "")]
if (length(missing_vars) > 0) {
cat("Error: The following required environment variables are not set:\n")
cat(paste("- ", missing_vars, collapse = "\n"), "\n")
cat("Please set these variables before running the script.\n")
stop("Missing environment variables")
}
}
# Function to check and create database if necessary
check_database <- function() {
tryCatch({
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = Sys.getenv("SQL_SERVER_NAME"),
Database = "master",
Trusted_Connection = "Yes")
result <- dbGetQuery(con, paste0("SELECT name FROM sys.databases WHERE name = '", Sys.getenv("SQL_DATABASE_NAME"), "'"))
if (nrow(result) == 0) {
cat(Sys.getenv("SQL_DATABASE_NAME"), "database does not exist. Creating it now...\n")
dbExecute(con, paste0("CREATE DATABASE ", Sys.getenv("SQL_DATABASE_NAME")))
cat(Sys.getenv("SQL_DATABASE_NAME"), "database created.\n")
} else {
cat(Sys.getenv("SQL_DATABASE_NAME"), "database exists.\n")
}
dbDisconnect(con)
}, error = function(e) {
cat("Error in check_database:", conditionMessage(e), "\n")
})
}
# Function to run PowerShell script
run_powershell_script <- function(script_name) {
script_path <- file.path(here::here(), "..", "sql", script_name)
cat("Running PowerShell script:", script_path, "\n")
if (file.exists(script_path)) {
# Convert to relative path
relative_script_path <- file.path("..", "sql", script_name)
# Change working directory to the R folder before running the PowerShell script
original_wd <- getwd()
setwd(here::here())
output <- system2("powershell",
args = c("-ExecutionPolicy", "Bypass", "-File", relative_script_path),
stdout = TRUE, stderr = TRUE)
# Change back to the original working directory
setwd(original_wd)
cat("PowerShell script output:\n", paste(output, collapse = "\n"), "\n")
} else {
cat("Error: PowerShell script not found at", script_path, "\n")
}
cat(script_name, "completed.\n\n")
}
# Main execution
main <- function() {
# make sure env vars are set up before beginning
check_env_variables()
cat("Starting data processing pipeline...\n\n")
# Run R scripts
run_r_script("data_downloader.R")
run_r_script("data_converter.R")
# Check and create database if necessary
check_database()
# Run SQL and PowerShell scripts
run_sql_script("1_setup_database_and_timeseries.sql")
run_sql_script("2_prepare_gridded_data_staging.sql")
# Run PowerShell script with error handling
tryCatch({
run_powershell_script("import-gridded-data.ps1")
}, error = function(e) {
cat("Error running PowerShell script:", conditionMessage(e), "\n")
})
run_sql_script("3_process_gridded_data.sql")
cat("Data processing pipeline completed.\n")
cat("Next steps: Use Tableau to visualize the cleaned data.\n")
}
# Run the main function
main()
gc()
# runner.R
# Function to install and load packages
install_and_load <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
cat("Installing package:", package, "\n")
install.packages(package, dependencies = TRUE, quiet = TRUE)
library(package, character.only = TRUE)
}
}
# Install and load required packages
install_and_load("here")
install_and_load("DBI")
install_and_load("odbc")
# Print the current working directory
cat("Current working directory:", getwd(), "\n")
# Print the project root directory as determined by here
cat("Project root directory:", here::here(), "\n")
# Function to run R scripts
run_r_script <- function(script_name) {
script_path <- file.path(here::here(), script_name)
cat("Looking for script at:", script_path, "\n")
if (file.exists(script_path)) {
cat("Running", script_name, "...\n")
source(script_path)
cat(script_name, "completed.\n\n")
} else {
cat("Error:", script_name, "not found at", script_path, "\n")
}
}
# Function to run SQL scripts
run_sql_script <- function(script_name) {
script_path <- file.path(here::here(), "..", "sql", script_name)
cat("Running SQL script:", script_path, "\n")
tryCatch({
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = Sys.getenv("SQL_SERVER_NAME"),
Database = Sys.getenv("SQL_DATABASE_NAME"),
Trusted_Connection = "Yes")
if (file.exists(script_path)) {
sql_script <- readLines(script_path)
sql_script <- paste(sql_script, collapse = "\n")
# Split the script into individual statements
statements <- strsplit(sql_script, ";")[[1]]
for (stmt in statements) {
if (trimws(stmt) != "") {
tryCatch({
if (grepl("^PRINT", trimws(stmt), ignore.case = TRUE)) {
# For PRINT statements, use dbGetQuery to capture the output
result <- dbGetQuery(con, paste0("DECLARE @msg NVARCHAR(MAX); ", stmt, "; SELECT @msg AS message"))
cat("SQL Server message:", result$message, "\n")
} else {
# For other statements, use dbExecute
result <- dbExecute(con, stmt)
cat("Executed statement. Rows affected:", result, "\n")
}
}, error = function(e) {
cat("Error executing statement:", conditionMessage(e), "\n")
})
}
}
} else {
cat("Error: SQL script not found at", script_path, "\n")
}
dbDisconnect(con)
cat(script_name, "processing completed.\n\n")
}, error = function(e) {
cat("Error in run_sql_script:", conditionMessage(e), "\n")
})
}
# Function to check if all required environment variables are set
check_env_variables <- function() {
required_vars <- c("SQL_SERVER_NAME", "SQL_DATABASE_NAME", "SQL_TABLE_NAME", "CSV_PATH")
missing_vars <- required_vars[sapply(required_vars, function(x) Sys.getenv(x) == "")]
if (length(missing_vars) > 0) {
cat("Error: The following required environment variables are not set:\n")
cat(paste("- ", missing_vars, collapse = "\n"), "\n")
cat("Please set these variables before running the script.\n")
stop("Missing environment variables")
}
}
# Function to check and create database if necessary
check_database <- function() {
tryCatch({
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = Sys.getenv("SQL_SERVER_NAME"),
Database = "master",
Trusted_Connection = "Yes")
result <- dbGetQuery(con, paste0("SELECT name FROM sys.databases WHERE name = '", Sys.getenv("SQL_DATABASE_NAME"), "'"))
if (nrow(result) == 0) {
cat(Sys.getenv("SQL_DATABASE_NAME"), "database does not exist. Creating it now...\n")
dbExecute(con, paste0("CREATE DATABASE ", Sys.getenv("SQL_DATABASE_NAME")))
cat(Sys.getenv("SQL_DATABASE_NAME"), "database created.\n")
} else {
cat(Sys.getenv("SQL_DATABASE_NAME"), "database exists.\n")
}
dbDisconnect(con)
}, error = function(e) {
cat("Error in check_database:", conditionMessage(e), "\n")
})
}
# Function to run PowerShell script
run_powershell_script <- function(script_name) {
script_path <- file.path(here::here(), "..", "sql", script_name)
cat("Running PowerShell script:", script_path, "\n")
if (file.exists(script_path)) {
# Convert to relative path
relative_script_path <- file.path("..", "sql", script_name)
# Change working directory to the R folder before running the PowerShell script
original_wd <- getwd()
setwd(here::here())
output <- system2("powershell",
args = c("-ExecutionPolicy", "Bypass", "-File", relative_script_path),
stdout = TRUE, stderr = TRUE)
# Change back to the original working directory
setwd(original_wd)
cat("PowerShell script output:\n", paste(output, collapse = "\n"), "\n")
} else {
cat("Error: PowerShell script not found at", script_path, "\n")
}
cat(script_name, "completed.\n\n")
}
# Main execution
main <- function() {
# make sure env vars are set up before beginning
check_env_variables()
cat("Starting data processing pipeline...\n\n")
# Run R scripts
run_r_script("data_downloader.R")
run_r_script("data_converter.R")
# Check and create database if necessary
check_database()
# Run SQL and PowerShell scripts
run_sql_script("1_setup_database_and_timeseries.sql")
run_sql_script("2_prepare_gridded_data_staging.sql")
# Run PowerShell script with error handling
tryCatch({
run_powershell_script("import-gridded-data.ps1")
}, error = function(e) {
cat("Error running PowerShell script:", conditionMessage(e), "\n")
})
run_sql_script("3_process_gridded_data.sql")
cat("Data processing pipeline completed.\n")
cat("Next steps: Use Tableau to visualize the cleaned data.\n")
}
# Run the main function
main()
# runner.R
# Function to install and load packages
install_and_load <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
cat("Installing package:", package, "\n")
install.packages(package, dependencies = TRUE, quiet = TRUE)
library(package, character.only = TRUE)
}
}
# Install and load required packages
install_and_load("here")
install_and_load("DBI")
install_and_load("odbc")
# Print the current working directory
cat("Current working directory:", getwd(), "\n")
# Print the project root directory as determined by here
cat("Project root directory:", here::here(), "\n")
# Function to run R scripts
run_r_script <- function(script_name) {
script_path <- file.path(here::here(), script_name)
cat("Looking for script at:", script_path, "\n")
if (file.exists(script_path)) {
cat("Running", script_name, "...\n")
source(script_path)
cat(script_name, "completed.\n\n")
} else {
cat("Error:", script_name, "not found at", script_path, "\n")
}
}
# Function to run SQL scripts
run_sql_script <- function(script_name) {
script_path <- file.path(here::here(), "..", "sql", script_name)
cat("Running SQL script:", script_path, "\n")
tryCatch({
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = Sys.getenv("SQL_SERVER_NAME"),
Database = Sys.getenv("SQL_DATABASE_NAME"),
Trusted_Connection = "Yes")
if (file.exists(script_path)) {
sql_script <- readLines(script_path)
sql_script <- paste(sql_script, collapse = "\n")
# Split the script into individual statements
statements <- strsplit(sql_script, ";")[[1]]
for (stmt in statements) {
if (trimws(stmt) != "") {
tryCatch({
if (grepl("^PRINT", trimws(stmt), ignore.case = TRUE)) {
# For PRINT statements, use dbGetQuery to capture the output
result <- dbGetQuery(con, paste0("DECLARE @msg NVARCHAR(MAX); ", stmt, "; SELECT @msg AS message"))
cat("SQL Server message:", result$message, "\n")
} else {
# For other statements, use dbExecute
result <- dbExecute(con, stmt)
cat("Executed statement. Rows affected:", result, "\n")
}
}, error = function(e) {
cat("Error executing statement:", conditionMessage(e), "\n")
})
}
}
} else {
cat("Error: SQL script not found at", script_path, "\n")
}
dbDisconnect(con)
cat(script_name, "processing completed.\n\n")
}, error = function(e) {
cat("Error in run_sql_script:", conditionMessage(e), "\n")
})
}
# Function to check if all required environment variables are set
check_env_variables <- function() {
required_vars <- c("SQL_SERVER_NAME", "SQL_DATABASE_NAME", "SQL_TABLE_NAME", "CSV_PATH")
missing_vars <- required_vars[sapply(required_vars, function(x) Sys.getenv(x) == "")]
if (length(missing_vars) > 0) {
cat("Error: The following required environment variables are not set:\n")
cat(paste("- ", missing_vars, collapse = "\n"), "\n")
cat("Please set these variables before running the script.\n")
stop("Missing environment variables")
}
}
# Function to check and create database if necessary
check_database <- function() {
tryCatch({
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = Sys.getenv("SQL_SERVER_NAME"),
Database = "master",
Trusted_Connection = "Yes")
result <- dbGetQuery(con, paste0("SELECT name FROM sys.databases WHERE name = '", Sys.getenv("SQL_DATABASE_NAME"), "'"))
if (nrow(result) == 0) {
cat(Sys.getenv("SQL_DATABASE_NAME"), "database does not exist. Creating it now...\n")
dbExecute(con, paste0("CREATE DATABASE ", Sys.getenv("SQL_DATABASE_NAME")))
cat(Sys.getenv("SQL_DATABASE_NAME"), "database created.\n")
} else {
cat(Sys.getenv("SQL_DATABASE_NAME"), "database exists.\n")
}
dbDisconnect(con)
}, error = function(e) {
cat("Error in check_database:", conditionMessage(e), "\n")
})
}
# Function to run PowerShell script
run_powershell_script <- function(script_name) {
script_path <- file.path(here::here(), "..", "sql", script_name)
cat("Running PowerShell script:", script_path, "\n")
if (file.exists(script_path)) {
# Convert to relative path
relative_script_path <- file.path("..", "sql", script_name)
# Change working directory to the R folder before running the PowerShell script
original_wd <- getwd()
setwd(here::here())
output <- system2("powershell",
args = c("-ExecutionPolicy", "Bypass", "-File", relative_script_path),
stdout = TRUE, stderr = TRUE)
# Change back to the original working directory
setwd(original_wd)
cat("PowerShell script output:\n", paste(output, collapse = "\n"), "\n")
} else {
cat("Error: PowerShell script not found at", script_path, "\n")
}
cat(script_name, "completed.\n\n")
}
# Main execution
main <- function() {
# make sure env vars are set up before beginning
check_env_variables()
cat("Starting data processing pipeline...\n\n")
# Run R scripts
run_r_script("data_downloader.R")
run_r_script("data_converter.R")
# Check and create database if necessary
check_database()
# Run SQL and PowerShell scripts
run_sql_script("1_setup_database_and_timeseries.sql")
run_sql_script("2_prepare_gridded_data_staging.sql")
# Run PowerShell script with error handling
tryCatch({
run_powershell_script("import-gridded-data.ps1")
}, error = function(e) {
cat("Error running PowerShell script:", conditionMessage(e), "\n")
})
run_sql_script("3_process_gridded_data.sql")
cat("Data processing pipeline completed.\n")
cat("Next steps: Use Tableau to visualize the cleaned data.\n")
}
# Run the main function
main()
