verbose_log("Data processing pipeline completed.", verbose)
verbose_log("Next steps: Use Tableau to visualize the cleaned data.", verbose)
}
# Run the main function with verbose logging
main(verbose = TRUE)
# runner.R
source("utils.R")
main <- function(verbose = FALSE) {
check_env_variables()
verbose_log("Starting data processing pipeline...", verbose)
run_r_script("data_downloader.R", verbose)
run_r_script("data_converter.R", verbose)
check_database(verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
dbDisconnect(con)
verbose_log("Data processing pipeline completed.", verbose)
verbose_log("Next steps: Use Tableau to visualize the cleaned data.", verbose)
}
# Run the main function with verbose logging
main(verbose = TRUE)
# runner.R
source("utils.R")
main <- function(verbose = FALSE) {
check_env_variables()
verbose_log("Starting data processing pipeline...", verbose)
run_r_script("data_downloader.R", verbose)
run_r_script("data_converter.R", verbose)
check_database(verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
dbDisconnect(con)
verbose_log("Data processing pipeline completed.", verbose)
verbose_log("Next steps: Use Tableau to visualize the cleaned data.", verbose)
}
# Run the main function with verbose logging
main(verbose = TRUE)
# runner.R
source("utils.R")
main <- function(verbose = FALSE) {
check_env_variables()
verbose_log("Starting data processing pipeline...", verbose)
run_r_script("data_downloader.R", verbose)
run_r_script("data_converter.R", verbose)
check_database(verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
dbDisconnect(con)
verbose_log("Data processing pipeline completed.", verbose)
verbose_log("Next steps: Use Tableau to visualize the cleaned data.", verbose)
}
# Run the main function with verbose logging
main(verbose = TRUE)
# runner.R
source("utils.R")
main <- function(verbose = FALSE) {
check_env_variables()
verbose_log("Starting data processing pipeline...", verbose)
run_r_script("data_downloader.R", verbose)
run_r_script("data_converter.R", verbose)
check_database(verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
dbDisconnect(con)
verbose_log("Data processing pipeline completed.", verbose)
verbose_log("Next steps: Use Tableau to visualize the cleaned data.", verbose)
}
# Run the main function with verbose logging
main(verbose = TRUE)
# runner.R
source("utils.R")
main <- function(verbose = FALSE) {
check_env_variables()
verbose_log("Starting data processing pipeline...", verbose)
run_r_script("data_downloader.R", verbose)
run_r_script("data_converter.R", verbose)
check_database(verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
dbDisconnect(con)
verbose_log("Data processing pipeline completed.", verbose)
verbose_log("Next steps: Use Tableau to visualize the cleaned data.", verbose)
}
# Run the main function with verbose logging
main(verbose = TRUE)
# runner.R
source("utils.R")
main <- function(verbose = FALSE) {
check_env_variables()
verbose_log("Starting data processing pipeline...", verbose)
run_r_script("data_downloader.R", verbose)
run_r_script("data_converter.R", verbose)
check_database(verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
dbDisconnect(con)
verbose_log("Data processing pipeline completed.", verbose)
verbose_log("Next steps: Use Tableau to visualize the cleaned data.", verbose)
}
# Run the main function with verbose logging
main(verbose = TRUE)
# runner.R
source("utils.R")
main <- function(verbose = FALSE) {
check_env_variables()
verbose_log("Starting data processing pipeline...", verbose)
run_r_script("data_downloader.R", verbose)
run_r_script("data_converter.R", verbose)
check_database(verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
dbDisconnect(con)
verbose_log("Data processing pipeline completed.", verbose)
verbose_log("Next steps: Use Tableau to visualize the cleaned data.", verbose)
}
# Run the main function with verbose logging
main(verbose = TRUE)
# runner.R
# Set working directory to the script's location
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# grab some useful utility functions
source("utils.R")
main <- function(verbose = FALSE) {
check_env_variables()
verbose_log("Starting data processing pipeline...", verbose)
run_r_script("data_downloader.R", verbose)
run_r_script("data_converter.R", verbose)
check_database(verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
dbDisconnect(con)
verbose_log("Data processing pipeline completed.", verbose)
verbose_log("Next steps: Use Tableau to visualize the cleaned data.", verbose)
}
# Run the main function with verbose logging
main(verbose = TRUE)
# runner.R
# Set working directory to the script's location
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# grab some useful utility functions
source("utils.R")
main <- function(verbose = FALSE) {
check_env_variables()
verbose_log("Starting data processing pipeline...", verbose)
run_r_script("data_downloader.R", verbose)
run_r_script("data_converter.R", verbose)
check_database(verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
dbDisconnect(con)
verbose_log("Data processing pipeline completed.", verbose)
verbose_log("Next steps: Use Tableau to visualize the cleaned data.", verbose)
}
# Run the main function with verbose logging
main(verbose = FALSE)
# runner.R
# Set working directory to the script's location
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Load required packages
required_packages <- c("here", "DBI", "odbc", "R.utils", "readr", "dplyr", "lubridate")
for(package in required_packages) {
if(!require(package, character.only = TRUE)) {
install.packages(package, dependencies = TRUE)
library(package, character.only = TRUE)
}
}
# Source utility functions
source("utils.R")
# Set default environment variables if not already set
if(Sys.getenv("SQL_SERVER_NAME") == "") Sys.setenv(SQL_SERVER_NAME = "(local)")
if(Sys.getenv("SQL_DATABASE_NAME") == "") Sys.setenv(SQL_DATABASE_NAME = "GlobalTemperatureAnalysis")
if(Sys.getenv("SQL_TABLE_NAME") == "") Sys.setenv(SQL_TABLE_NAME = "GriddedDataStaging")
if(Sys.getenv("VERBOSE") == "") Sys.setenv(VERBOSE = "FALSE")
# Function to ensure SQL Server is installed and running
ensure_sql_server <- function() {
tryCatch({
con <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = Sys.getenv("SQL_SERVER_NAME"),
Trusted_Connection = "Yes")
DBI::dbDisconnect(con)
}, error = function(e) {
stop("SQL Server is not installed or not running. Please install and start SQL Server.")
})
}
# Function to install PowerShell module
install_powershell_module <- function() {
system("powershell -Command \"& {Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; Install-Module -Name SqlServer -Force -AllowClobber}\"")
}
main <- function() {
verbose <- as.logical(Sys.getenv("VERBOSE"))
# Ensure SQL Server is installed and running
ensure_sql_server()
# Install PowerShell module
install_powershell_module()
# Check and create database if necessary
check_database(verbose)
if (!verbose) {
cat("Starting data processing pipeline...\n")
}
run_r_script("data_downloader.R", verbose)
run_r_script("data_converter.R", verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
run_sql_script("4_data_exploration.sql", con, verbose)
dbDisconnect(con)
if (!verbose) {
cat("Data processing pipeline completed.\n")
cat("Data exploration results available in the database.\n")
cat("Next steps: Review exploration results and use Tableau for further visualization.\n")
}
}
# Run the main function
main()
# runner.R
# Set working directory to the script's location
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Load required packages
required_packages <- c("here", "DBI", "odbc", "R.utils", "readr", "dplyr", "lubridate")
for(package in required_packages) {
if(!require(package, character.only = TRUE)) {
install.packages(package, dependencies = TRUE)
library(package, character.only = TRUE)
}
}
# Source utility functions
source("utils.R")
# Set default environment variables if not already set
if(Sys.getenv("SQL_SERVER_NAME") == "") Sys.setenv(SQL_SERVER_NAME = "(local)")
if(Sys.getenv("SQL_DATABASE_NAME") == "") Sys.setenv(SQL_DATABASE_NAME = "GlobalTemperatureAnalysis")
if(Sys.getenv("SQL_TABLE_NAME") == "") Sys.setenv(SQL_TABLE_NAME = "GriddedDataStaging")
if(Sys.getenv("VERBOSE") == "") Sys.setenv(VERBOSE = "FALSE")
# Function to ensure SQL Server is installed and running
ensure_sql_server <- function() {
tryCatch({
con <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = Sys.getenv("SQL_SERVER_NAME"),
Trusted_Connection = "Yes")
DBI::dbDisconnect(con)
}, error = function(e) {
stop("SQL Server is not installed or not running. Please install and start SQL Server.")
})
}
# Function to install PowerShell module
install_powershell_module <- function() {
system("powershell -Command \"& {Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; Install-Module -Name SqlServer -Force -AllowClobber -Scope CurrentUser}\"")
}
main <- function() {
verbose <- as.logical(Sys.getenv("VERBOSE"))
# Ensure SQL Server is installed and running
ensure_sql_server()
# Install PowerShell module
install_powershell_module()
# Check and create database if necessary
check_database(verbose)
if (!verbose) {
cat("Starting data processing pipeline...\n")
}
run_r_script("data_downloader.R", verbose)
run_r_script("data_converter.R", verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
run_sql_script("4_data_exploration.sql", con, verbose)
dbDisconnect(con)
if (!verbose) {
cat("Data processing pipeline completed.\n")
cat("Data exploration results available in the database.\n")
cat("Next steps: Review exploration results and use Tableau for further visualization.\n")
}
}
# Run the main function
main()
# runner.R
# Set working directory to the script's location
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Source utility functions
source("utils.R")
# Load required packages and set default environment variables
load_required_packages()
# runner.R
# Set working directory to the script's location
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Source utility functions
source("utils.R")
# Load required packages and set default environment variables
load_required_packages()
set_default_env_variables()
main <- function() {
verbose <- as.logical(Sys.getenv("VERBOSE"))
ensure_sql_server()
install_powershell_module()
check_database(verbose)
if (!verbose) {
cat("Starting data processing pipeline...\n")
}
run_r_script("data_downloader.R", verbose)
run_r_script("data_converter.R", verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
run_sql_script("4_data_exploration.sql", con, verbose)
dbDisconnect(con)
if (!verbose) {
cat("Data processing pipeline completed.\n")
cat("Data exploration results available in the database.\n")
cat("Next steps: Review exploration results and use Tableau for further visualization.\n")
}
}
# Run the main function
main()
# runner.R
# Set working directory to the script's location
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Source utility functions
source("utils.R")
# Load required packages and set default environment variables
load_required_packages()
set_default_env_variables()
main <- function() {
verbose <- as.logical(Sys.getenv("VERBOSE"))
ensure_sql_server()
install_powershell_module()
check_database(verbose)
if (!verbose) {
cat("Starting data processing pipeline...\n")
}
total_downloaded <- run_r_script("data_downloader.R", verbose)
if (!verbose) {
cat(paste("Total files downloaded:", total_downloaded, "\n"))
}
run_r_script("data_converter.R", verbose)
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
run_sql_script("4_data_exploration.sql", con, verbose)
dbDisconnect(con)
if (!verbose) {
cat("Data processing pipeline completed.\n")
cat("Data exploration results available in the database.\n")
cat("Next steps: Review exploration results and use Tableau for further visualization.\n")
}
}
# Run the main function
main()
# runner.R
# Set working directory to the script's location
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Source utility functions
source("utils.R")
# Load required packages and set default environment variables
load_required_packages()
set_default_env_variables()
main <- function() {
verbose <- as.logical(Sys.getenv("VERBOSE"))
ensure_sql_server()
install_powershell_module()
check_database(verbose)
cat("Starting data processing pipeline...\n\n")
cat("Downloading data:\n")
total_downloaded <- as.numeric(run_r_script("data_downloader.R", verbose))
cat(paste("  Total files downloaded:", total_downloaded, "\n\n"))
cat("Converting data:\n")
run_r_script("data_converter.R", verbose)
cat("\n")
cat("Setting up database:\n")
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
cat("\n")
cat("Importing data:\n")
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
cat("\n")
cat("Processing and exploring data:\n")
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
run_sql_script("4_data_exploration.sql", con, verbose)
dbDisconnect(con)
cat("\n")
cat("Verifying data processing:\n")
con <- db_connect(verbose = verbose)
run_sql_script("5_verify_data_processing.sql", con, verbose = TRUE)  # Always run in verbose mode
dbDisconnect(con)
cat("\n")
cat("Verifying data exploration results:\n")
con <- db_connect(verbose = verbose)
run_sql_script("6_verify_data_exploration.sql", con, verbose = TRUE)  # Always run in verbose mode
dbDisconnect(con)
cat("\n")
cat("Data processing pipeline completed.\n")
cat("Data exploration results available in the database.\n")
cat("Next steps: Review exploration results and use Tableau for further visualization.\n")
}
# Run the main function
main()
# runner.R
# Set working directory to the script's location
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Source utility functions
source("utils.R")
# Load required packages and set default environment variables
load_required_packages()
set_default_env_variables()
main <- function() {
verbose <- as.logical(Sys.getenv("VERBOSE"))
ensure_sql_server()
install_powershell_module()
check_database(verbose)
cat("Starting data processing pipeline...\n\n")
cat("Downloading data:\n")
total_downloaded <- as.numeric(run_r_script("data_downloader.R", verbose))
cat(paste("  Total files downloaded:", total_downloaded, "\n\n"))
cat("Converting data:\n")
run_r_script("data_converter.R", verbose)
cat("\n")
cat("Setting up database:\n")
con <- db_connect(verbose = verbose)
run_sql_script("1_setup_database_and_timeseries.sql", con, verbose)
run_sql_script("2_prepare_gridded_data_staging.sql", con, verbose)
dbDisconnect(con)
cat("\n")
cat("Importing data:\n")
run_powershell_script("import-gridded-data.ps1", verbose = verbose)
cat("\n")
cat("Processing and exploring data:\n")
con <- db_connect(verbose = verbose)
run_sql_script("3_process_gridded_data.sql", con, verbose)
run_sql_script("4_data_exploration.sql", con, verbose)
dbDisconnect(con)
cat("\n")
cat("Verifying data processing:\n")
con <- db_connect(verbose = verbose)
results <- run_sql_script("5_verify_data_processing.sql", con, verbose = TRUE)
print_sql_results(results)
dbDisconnect(con)
cat("\n")
cat("Verifying data exploration results:\n")
con <- db_connect(verbose = verbose)
results <- run_sql_script("6_verify_data_exploration.sql", con, verbose = TRUE)
print_sql_results(results)
dbDisconnect(con)
cat("\n")
cat("Data processing pipeline completed.\n")
cat("Data exploration results available in the database.\n")
cat("Next steps: Review exploration results and use Tableau for further visualization.\n")
}
# Run the main function
main()
